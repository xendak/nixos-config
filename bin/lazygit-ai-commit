#!/bin/bash
set -euo pipefail

if [ $# -eq 0 ]; then
  echo "Usage: $0 <ai-command> [additional-args...]"
  echo "Example: $0 'gemini -p'"
  echo "Example: $0 'gemini -m gemini-2.5-pro -p'"
  echo "Example: $0 'aichat'"
  echo "Example: $0 'ollama run llama3.2'"
  exit 1
fi

AI_COMMAND="$1"
shift

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo "This is not a Git repository."
  exit 1
fi

if git diff --cached --quiet; then
  echo "No staged changes detected. Nothing to commit."
  exit 0
fi

RECENT_COMMITS=$(git log -n 10 --pretty=format:'%h %s')

DIFF=$(git --no-pager diff --no-color --no-ext-diff --cached)

PROMPT="IMPORTANT:
1) Begin immediately with the first commit messageâ€”no greetings, no commentary.
2) Your commit messages must be based on the DIFF alone; recent commits and examples are only for context. DO NOT copy or repeat them.
3) Generate between 3 and 7 single-type commits based on the DIFF. If MULTIPLE distinct changes are present, add 1 additional multi-type commit (total up to 8). 
4) Use only these types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, revert.
5) Separate each commit message ONLY with a line containing exactly three hyphens (---), no other text or spacing.
6) For single-type commit: 
   <type>(<optional-scope>): <short description> 
   <optional-body>
   <optional-footer>
7) For a multi-type commit, format it as exactly two lines, each line a conventional commit header, for example:
  <type>(<optional-scope>): <description>
  <type>(<optional-scope>/<optional-scope>): <description>
8) No numbering (e.g., no '1/5'), no extra text, no markdown, no commentary.
9) Do not hallucinate or create low-quality commit-messages.
  It is preferable to have less or no commit messages at all than to receive numerous low-quality ones.

EXAMPLE COMMITS:
feat(auth): add password reset flow
Added secure token generation and email delivery system.
BREAKING CHANGE: Changed password reset API endpoint
---
fix(db): resolve deadlock in transaction handler
Protected critical section with mutex to prevent concurrent access issues.
---
feat(config): add new environment variables
fix(config): correct variable naming

RECENT COMMITS:
$RECENT_COMMITS

ANALYZE THIS DIFF:
$DIFF"

selected_commit_message=$(
  echo "$PROMPT" | $AI_COMMAND "$@" |
    awk 'BEGIN {RS="---"} NF {
          sub(/^[[:space:]-]+/, "");
          sub(/[[:space:]]+$/, "");
          printf "%s%c", $0, 0
        }' |
    /nix/store/59515k9fy7cigbjxkjc5biiipayfsmdy-fzf-0.63.0/bin/fzf --height 20 --border --ansi --read0 --no-sort \
      --with-nth=1 --delimiter='\n' \
      --preview 'echo {}' \
      --preview-window=up:wrap
)

if [ -z "$selected_commit_message" ]; then
  echo "No commit message selected."
  exit 0
fi

COMMIT_MSG_FILE=$(mktemp)
printf "%s" "$selected_commit_message" >"$COMMIT_MSG_FILE"

CHECKSUM_BEFORE=$(shasum "$COMMIT_MSG_FILE" | awk '{ print $1 }')
${EDITOR:-/nix/store/yfm6hyghb8pr2vgskz2cls913465n1gs-helix-25.01.1/bin/hx} "$COMMIT_MSG_FILE"

CHECKSUM_AFTER=$(shasum "$COMMIT_MSG_FILE" | awk '{ print $1 }')

if [ "$CHECKSUM_BEFORE" != "$CHECKSUM_AFTER" ]; then
  git commit -F "$COMMIT_MSG_FILE"
  echo "Committed successfully!"
else
  echo "Commit message was not saved or modified, commit aborted."
  exit 0
fi

rm -f "$COMMIT_MSG_FILE"
