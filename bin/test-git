#!/bin/bash
set -euo pipefail

if [ -z "${GEMINI_API_KEY:-}" ]; then
    echo "Error: GEMINI_API_KEY environment variable is not set"
    echo "Please set it with: export GEMINI_API_KEY='your-api-key'"
    exit 1
fi

if [ $# -eq 0 ]; then
    echo "Usage: $0 <prompt-text>"
    echo "Example: $0 'Generate commit messages for this diff'"
    exit 1
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "This is not a Git repository."
    exit 1
fi

if git diff --cached --quiet; then
    echo "No staged changes detected. Nothing to commit."
    exit 0
fi

RECENT_COMMITS=$(git log -n 10 --pretty=format:'%h %s')
DIFF=$(git --no-pager diff --no-color --no-ext-diff --cached)

FULL_PROMPT="IMPORTANT:
1) Begin immediately with the first commit messageâ€”no greetings, no commentary.
2) Your commit messages must be based on the DIFF alone; recent commits and examples are only for context. DO NOT copy or repeat them.
3) Generate between 3 and 7 single-type commits based on the DIFF. If MULTIPLE distinct changes are present, add 1 additional multi-type commit (total up to 8). 
4) Use only these types: feat, fix, docs, style, refactor, perf, test, chore, build, ci, revert.
5) Separate each commit message ONLY with a line containing exactly three hyphens (---), no other text or spacing.
6) For single-type commit: 
   <type>(<optional-scope>): <short description> 
   <optional-body>
   <optional-footer>
7) For a multi-type commit, format it as exactly two lines, each line a conventional commit header, for example:
  <type>(<optional-scope>): <description>
  <type>(<optional-scope>/<optional-scope>): <description>
8) No numbering (e.g., no '1/5'), no extra text, no markdown, no commentary.
9) Do not hallucinate or create low-quality commit-messages.
  It is preferable to have less or no commit messages at all than to receive numerous low-quality ones.

EXAMPLE COMMITS:
feat(auth): add password reset flow
Added secure token generation and email delivery system.
BREAKING CHANGE: Changed password reset API endpoint
---
fix(db): resolve deadlock in transaction handler
Protected critical section with mutex to prevent concurrent access issues.
---
feat(config): add new environment variables
fix(config): correct variable naming

RECENT COMMITS:
$RECENT_COMMITS

ANALYZE THIS DIFF:
$DIFF"

# Function to make request to Gemini API
make_gemini_request() {
    local prompt="$1"
    local json_payload=$(jq -n --arg text "$prompt" '{
        contents: [{
            parts: [{text: $text}]
        }]
    }')
    
    local response=$(curl -s -X POST \
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}" \
        -H "Content-Type: application/json" \
        -d "$json_payload")
    
    # Check if curl succeeded
    if [ $? -ne 0 ]; then
        echo "Error: Failed to make request to Gemini API" >&2
        return 1
    fi
    
    # Parse the response and extract the text
    local ai_response=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text // empty')
    
    if [ -z "$ai_response" ]; then
        echo "Error: No response from Gemini API or invalid response format" >&2
        echo "Response: $response" >&2
        return 1
    fi
    
    echo "$ai_response"
}

# Make the request to Gemini
echo "Generating commit messages..." >&2
ai_response=$(make_gemini_request "$FULL_PROMPT")

if [ $? -ne 0 ]; then
    echo "Failed to get response from Gemini API"
    exit 1
fi

# Process the response and present options with fzf
selected_commit_message=$(
    echo "$ai_response" |
    awk 'BEGIN {RS="---"} NF {
        sub(/^[[:space:]-]+/, "");
        sub(/[[:space:]]+$/, "");
        printf "%s%c", $0, 0
    }' |
    /nix/store/59515k9fy7cigbjxkjc5biiipayfsmdy-fzf-0.63.0/bin/fzf --height 20 --border --ansi --read0 --no-sort \
        --with-nth=1 --delimiter='\n' \
        --preview 'echo {}' \
        --preview-window=up:wrap
)

if [ -z "$selected_commit_message" ]; then
    echo "No commit message selected."
    exit 0
fi

# Create temporary file and open in editor
COMMIT_MSG_FILE=$(mktemp)
printf "%s" "$selected_commit_message" >"$COMMIT_MSG_FILE"

CHECKSUM_BEFORE=$(shasum "$COMMIT_MSG_FILE" | awk '{ print $1 }')
${EDITOR:-/nix/store/yfm6hyghb8pr2vgskz2cls913465n1gs-helix-25.01.1/bin/hx} "$COMMIT_MSG_FILE"
CHECKSUM_AFTER=$(shasum "$COMMIT_MSG_FILE" | awk '{ print $1 }')

if [ "$CHECKSUM_BEFORE" != "$CHECKSUM_AFTER" ]; then
    git commit -F "$COMMIT_MSG_FILE"
    echo "Committed successfully!"
else
    echo "Commit message was not saved or modified, commit aborted."
    exit 0
fi

rm -f "$COMMIT_MSG_FILE"
